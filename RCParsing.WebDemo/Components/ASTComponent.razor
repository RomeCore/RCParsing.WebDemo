@using System.Text

<label>
	<input type="checkbox" checked="@optimizeAst" @onchange="OptCheckboxChanged" />
	Optimize AST
</label>

@if (exception != null)
{
	<pre>
		<code>
@exception.ToString().Replace("\t", "    ")
		</code>
	</pre>
}
else if (!string.IsNullOrWhiteSpace(definition))
{
	<div style="overflow: auto; border: 1px solid #ccc;">
		<MermaidDiagram Definition="@definition" />
	</div>

	@if (walkTrace != null)
	{
		<pre>
			<code>
Walk trace:

@walkTrace
			</code>
		</pre>
	}
}

@code {
	#nullable disable

	private string definition;
	private Exception exception;
	private ParsedRuleResultBase originalAst;
	private bool optimizeAst = false;
	private string walkTrace;

	public void Render(ParsedRuleResultBase ast)
	{
		if (ast == null)
		{
			walkTrace = null;
			return;
		}

		originalAst = ast;
		if (optimizeAst)
			ast = ast.Optimized();
		walkTrace = ast.Context.walkTrace.Render();

		var sb = new StringBuilder();
		sb.AppendLine("flowchart TD");

		int counter = 0;
		var queue = new Queue<(ParsedRuleResultBase node, int? parentId, int id)>();
		queue.Enqueue((ast, null, counter));

		while (queue.Count > 0)
		{
			var (node, parentId, id) = queue.Dequeue();
			string nodeName = $"node{id}";
			bool isToken = node.IsToken;
			string nodeLabel = isToken && node.Length > 0 ? node.Text.Replace("\"", "#quot;") : node.Rule.ToString(0);

			sb.AppendLine($"    {nodeName}[\"{nodeLabel}\"]");

			if (parentId.HasValue)
			{
				string parentName = $"node{parentId.Value}";
				sb.AppendLine($"    {parentName} --> {nodeName}");
			}

			if (!isToken)
			{
				foreach (var child in node)
				{
					int childId = ++counter;
					queue.Enqueue((child, id, childId));
				}
			}
		}

		Render(sb.ToString());
	}

	private void OptCheckboxChanged(ChangeEventArgs e)
	{
		optimizeAst = (bool)e.Value;
		if (exception == null)
			Render(originalAst);
	}

	public void Render(string mermaid)
	{
		definition = mermaid;
		this.exception = null;
		InvokeAsync(StateHasChanged);
	}

	public void ShowException(Exception exception)
	{
		this.exception = exception;
		InvokeAsync(StateHasChanged);
	}
}